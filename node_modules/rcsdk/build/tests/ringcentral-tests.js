(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("mocha"), require("chai"), require("sinon"), require("sinon-chai"), require("../ringcentral"));
	else if(typeof define === 'function' && define.amd)
		define([, "chai", "sinon", "sinon-chai", "../ringcentral"], factory);
	else if(typeof exports === 'object')
		exports["SDK"] = factory(require("mocha"), require("chai"), require("sinon"), require("sinon-chai"), require("../ringcentral"));
	else
		root["RingCentral"] = root["RingCentral"] || {}, root["RingCentral"]["SDK"] = factory(root[undefined], root["chai"], root["sinon"], root[undefined], root["RingCentral"]["SDK"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_9__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

var context = __webpack_require__(2);
context.keys().forEach(context);
module.exports = context;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

var map = {
	"./SDK-spec.js": 3,
	"./core/Cache-spec.js": 10,
	"./core/Observable-spec.js": 11,
	"./core/Queue-spec.js": 12,
	"./core/Utils-spec.js": 13,
	"./http/ApiResponse-spec.js": 14,
	"./http/Client-spec.js": 15,
	"./platform/Platform-spec.js": 16,
	"./subscription/CachedSubscription-spec.js": 17,
	"./subscription/Subscription-spec.js": 18
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 2;


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _testTest = __webpack_require__(4);

var _SDK = __webpack_require__(9);

var _SDK2 = _interopRequireDefault(_SDK);

describe('RingCentral', function () {

    function test(suite, server, done) {
        var sdk, response;
        return regeneratorRuntime.async(function test$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
                case 0:

                    suite.timeout(10000); // Per SLA should be 3 seconds

                    sdk = new _SDK2['default']({ server: server, appKey: '', appSecret: '' });
                    context$2$0.prev = 2;
                    context$2$0.next = 5;
                    return regeneratorRuntime.awrap(sdk.platform().get('', null, { skipAuthCheck: true }));

                case 5:
                    response = context$2$0.sent;

                    _testTest.expect(response.json().uri).to.equal(server + '/restapi/v1.0');

                    sdk.cache().clean();

                    context$2$0.next = 13;
                    break;

                case 10:
                    context$2$0.prev = 10;
                    context$2$0.t0 = context$2$0['catch'](2);
                    throw context$2$0.t0;

                case 13:
                case 'end':
                    return context$2$0.stop();
            }
        }, null, this, [[2, 10]]);
    }

    it('connects to sandbox', function () {
        return test(this, _SDK2['default'].server.sandbox);
    });

    it('connects to production', function () {
        return test(this, _SDK2['default'].server.production);
    });
});

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

exports.__esModule = true;
exports.getRegistry = getRegistry;
exports.getSdk = getSdk;
exports.getMock = getMock;
exports.asyncTest = asyncTest;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _mocha2 = __webpack_require__(5);

var _mocha3 = _interopRequireDefault(_mocha2);

var _chai2 = __webpack_require__(6);

var _chai3 = _interopRequireDefault(_chai2);

var _sinon2 = __webpack_require__(7);

var _sinon3 = _interopRequireDefault(_sinon2);

var _sinonChai2 = __webpack_require__(8);

var _sinonChai3 = _interopRequireDefault(_sinonChai2);

var _SDK = __webpack_require__(9);

var _SDK2 = _interopRequireDefault(_SDK);

var chai = _chai3['default'] || window.chai;
exports.chai = chai;
var sinon = _sinon3['default'] || window.sinon;
exports.sinon = sinon;
var expect = chai.expect;
exports.expect = expect;
var spy = sinon.spy;

exports.spy = spy;
var client = new _SDK2['default'].mocks.Client();
var pubnub = new _SDK2['default'].pubnub.PubnubMockFactory();

// Alter default settings
_SDK2['default'].platform.Platform._refreshDelayMs = 1;
_SDK2['default'].core.Queue._pollInterval = 1;
_SDK2['default'].core.Queue._releaseTimeout = 50;
_SDK2['default'].subscription.Subscription._pollInterval = 1;

function getRegistry() {
    return client.registry();
}

/**
 * @return {SDK}
 */

function getSdk() {

    return new _SDK2['default']({
        server: 'http://whatever',
        appKey: 'whatever',
        appSecret: 'whatever',
        client: client,
        pubnubFactory: pubnub
    });
}

function getMock(fn) {
    var sdk, clean, platofrm, res;
    return regeneratorRuntime.async(function getMock$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                clean = function clean() {
                    sdk.cache().clean();
                    client.registry().clear();
                };

                sdk = getSdk();
                context$1$0.prev = 2;

                getRegistry().authentication();

                platofrm = sdk.platform();
                context$1$0.next = 7;
                return regeneratorRuntime.awrap(platofrm.login({
                    username: 'whatever',
                    password: 'whatever'
                }));

            case 7:
                context$1$0.next = 9;
                return regeneratorRuntime.awrap(fn(sdk));

            case 9:
                res = context$1$0.sent;

                clean();

                return context$1$0.abrupt('return', res);

            case 14:
                context$1$0.prev = 14;
                context$1$0.t0 = context$1$0['catch'](2);

                clean();
                throw context$1$0.t0;

            case 18:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this, [[2, 14]]);
}

function asyncTest(fn) {

    return function () {
        return getMock(fn);
    };
}

/***/ },
/* 5 */
/***/ function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_5__;

/***/ },
/* 6 */
/***/ function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_6__;

/***/ },
/* 7 */
/***/ function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_7__;

/***/ },
/* 8 */
/***/ function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_8__;

/***/ },
/* 9 */
/***/ function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_9__;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _testTest = __webpack_require__(4);

var _SDK = __webpack_require__(9);

var _SDK2 = _interopRequireDefault(_SDK);

describe('RingCentral.core.Cache', function () {

    var Cache = _SDK2['default'].core.Cache;

    describe('getItem', function () {

        it('returns a previously set item', function () {

            var cache = new Cache({ 'rc-foo': '"bar"' });

            _testTest.expect(cache.getItem('foo')).to.equal('bar');
        });

        it('returns null if item not found', function () {

            var cache = new Cache({});

            _testTest.expect(cache.getItem('foo')).to.equal(null);
        });
    });

    describe('setItem', function () {

        it('sets an item in storage', function () {

            var cache = new Cache({});

            _testTest.expect(cache.setItem('foo', { foo: 'bar' }).getItem('foo')).to.deep.equal({ foo: 'bar' });
        });
    });
});

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _testTest = __webpack_require__(4);

var _SDK = __webpack_require__(9);

var _SDK2 = _interopRequireDefault(_SDK);

describe('RingCentral.core.Observable', function () {

    var Observable = _SDK2['default'].core.Observable;

    describe('Regular events', function () {

        it('binds and fires events', function () {

            var o = new Observable(),
                a = 0;

            o.on('event', function () {
                a++;
            });

            o.emit('event');
            _testTest.expect(a).to.be.equal(1);

            o.emit('event');
            _testTest.expect(a).to.be.equal(2);
        });

        it('binds and unbinds events', function () {

            var o = new Observable(),
                a = 0,
                c = function c() {
                a++;
            };

            o.on('event', c);
            o.off('event', c);

            o.emit('event');
            _testTest.expect(a).to.be.equal(0);
        });

        it('don\'t share events', function () {

            var o1 = new Observable(),
                o2 = new Observable(),
                a = 0,
                c = function c() {
                a++;
            };

            o1.on('event', c);
            o2.on('event', c);

            o1.emit('event');
            o2.emit('event');

            _testTest.expect(a).to.be.equal(2);
        });
    });
});

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _testTest = __webpack_require__(4);

var _SDK = __webpack_require__(9);

var _SDK2 = _interopRequireDefault(_SDK);

describe('RingCentral.core.Queue', function () {

    var pollInterval = _SDK2['default'].core.Queue._pollInterval,
        releaseTimeout = _SDK2['default'].core.Queue._releaseTimeout;

    function getQueue() {
        return new _SDK2['default'].core.Queue(new _SDK2['default'].core.Cache({}), 'foo');
    }

    describe('poll', function () {

        it('resumes after timeout if not resumed before', function (done) {

            getQueue().pause().poll().then(function () {
                done();
            })['catch'](done);
        });

        it('can be resumed externally before timeout', function (done) {

            var queue = getQueue(),
                flag = false;

            queue.pause().poll().then(function () {
                _testTest.expect(flag).to.equal(true);
                done();
            });

            setTimeout(function () {
                flag = true;
                queue.resume();
            }, releaseTimeout / 2);
        });
    });
});

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _testTest = __webpack_require__(4);

var _SDK = __webpack_require__(9);

var _SDK2 = _interopRequireDefault(_SDK);

describe('RingCentral.core.Utils', function () {

    var utils = _SDK2['default'].core.Utils;

    describe('parseQueryString & queryStringify', function () {

        it('parses queryStrings', function () {

            _testTest.expect(utils.parseQueryString('foo=bar&bar=baz')).to.deep.equal({ foo: 'bar', bar: 'baz' });
            _testTest.expect(utils.parseQueryString('foo=bar&foo=baz')).to.deep.equal({ foo: ['bar', 'baz'] });
            _testTest.expect(utils.parseQueryString('foo')).to.deep.equal({ foo: true });
        });

        it('builds queryStrings', function () {

            _testTest.expect(utils.queryStringify({ foo: 'bar', bar: 'baz' })).to.equal('foo=bar&bar=baz');
            _testTest.expect(utils.queryStringify({ foo: ['bar', 'baz'] })).to.equal('foo=bar&foo=baz');
        });

        it('decodes pre-encoded string representation of object to be equal to original object', function () {

            function encodeDecode(v) {
                return utils.parseQueryString(utils.queryStringify(v));
            }

            var simple = { foo: 'bar' },
                array = { foo: ['bar', 'baz'] };

            _testTest.expect(encodeDecode(simple)).to.deep.equal(simple);
            _testTest.expect(encodeDecode(array)).to.deep.equal(array);
        });
    });

    describe('poll & stopPolling', function () {

        it('allows to set custom delay', function (done) {

            utils.poll(function (next, delay) {

                _testTest.expect(delay).to.equal(10);
                done();
            }, 10);
        });

        it('provides a method to do it continuously', function (done) {

            var i = 0;

            utils.poll(function (next) {

                i++;

                if (i < 3) next();else done();
            }, 1);

            after(function () {

                _testTest.expect(i).to.equal(3);
            });
        });

        it('provides a method stop', function (done) {

            var timeout = utils.poll(function (next) {

                done(new Error('This should never be reached'));
            }, 10);

            utils.stopPolling(timeout);

            done();
        });

        it('cancels a previous timeout if provided', function (done) {

            var timeout = utils.poll(function (next) {

                done(new Error('This should never be reached'));
            }, 10);

            var timeout2 = utils.poll(function (next) {

                done();
            }, 10, timeout);
        });
    });
});

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _testTest = __webpack_require__(4);

var _SDK = __webpack_require__(9);

var _SDK2 = _interopRequireDefault(_SDK);

describe('RingCentral.http.ApiResponse', function () {

    var ApiResponse = _SDK2['default'].http.ApiResponse;

    function createResponse(status, statusText, body, headers) {
        if (!headers) headers = jsonResponseHeaders;
        body = headers.trim() + '\n\n' + body;
        return ApiResponse.create(body, status, statusText);
    }

    var goodMultipartMixedResponse = '--Boundary_1245_945802293_1394135045248\n' + 'Content-Type: application/json\r\n' + '\r\n' + '{\n' + '  "response" : [ {\n' + '    "status" : 200\n' + '  }, {\n' + '    "status" : 200\n' + '  } ]\n' + '}\n' + '--Boundary_1245_945802293_1394135045248\n' + 'Content-Type: application/json\n' + '\n' + '{\n' + '  "foo" : "bar"\n' + '}\n' + '--Boundary_1245_945802293_1394135045248\n' + 'Content-Type: application/json\n' + '\n' + '{\n' + '  "baz" : "qux"\n' + '}\n' + '--Boundary_1245_945802293_1394135045248--\n',
        multipartMixedResponseWithErrorPart = '--Boundary_1245_945802293_1394135045248\n' + 'Content-Type: application/json\n' + '\n' + '{\n' + '  "response" : [ {\n' + '    "status" : 200\n' + '  }, {\n' + '    "status" : 404\n' + '  }, {\n' + '    "status" : 200\n' + '  } ]\n' + '}\n' + '--Boundary_1245_945802293_1394135045248\n' + 'Content-Type: application/json\n' + '\n' + '{\n' + '  "foo" : "bar"\n' + '}\n' + '--Boundary_1245_945802293_1394135045248\n' + 'Content-Type: application/json\n' + '\n' + '{\n' + '  "message" : "object not found"\n' + '}\n' + '--Boundary_1245_945802293_1394135045248\n' + 'Content-Type: application/json\n' + '\n' + '{\n' + '  "baz" : "qux"\n' + '}\n' + '--Boundary_1245_945802293_1394135045248--\n',
        badMultipartMixedResponse = '--Boundary_1245_945802293_1394135045248\n' + 'Content-Type: application/json\n' + '\n' + 'THIS IS JUNK AND CANNOT BE PARSED AS JSON\n' + '--Boundary_1245_945802293_1394135045248\n' + 'Content-Type: application/json\n' + '\n' + '{\n' + '  "foo" : "bar"\n' + '}\n' + '--Boundary_1245_945802293_1394135045248\n' + 'Content-Type: application/json\n' + '\n' + '{\n' + '  "baz" : "qux"\n' + '}\n' + '--Boundary_1245_945802293_1394135045248--\n',
        multipartResponseHeaders = 'content-type: multipart/mixed; boundary=Boundary_1245_945802293_1394135045248',
        jsonResponseHeaders = 'content-type: application/json; encoding=utf8';

    describe('constructor tests', function () {

        it('parses headers into object', function () {

            _testTest.expect(createResponse(200, 'OK', '{}', jsonResponseHeaders)['_isJson']()).to.equal(true);
            _testTest.expect(createResponse(207, 'Multi-Status', '{}', multipartResponseHeaders)['_isMultipart']()).to.equal(true);
        });

        it('calls the success callback after parsing a good multi-part/mixed response', function () {

            var response = createResponse(207, 'Multi-Status', goodMultipartMixedResponse, multipartResponseHeaders);

            _testTest.expect(function () {
                response.multipart();
            }).to.not['throw'](Error);
        });

        it('calls the success callback for all individual parts that are parsed (including errors)', function () {

            var res = createResponse(207, 'Multi-Status', multipartMixedResponseWithErrorPart, multipartResponseHeaders);
            _testTest.expect(res.text()).to.equal(multipartMixedResponseWithErrorPart);

            var multipart = res.multipart();

            _testTest.expect(multipart.length).to.equal(3);

            //expect(res.data[0]).to.be.instanceOf(r.Response); //FIXME
            _testTest.expect(multipart[0].error()).to.be.equal(null);
            _testTest.expect(multipart[0].json().foo).to.be.equal('bar');
            _testTest.expect(multipart[0].response().status).to.be.equal(200);

            //expect(res.data[1]).to.be.instanceOf(r.Response); //FIXME
            _testTest.expect(multipart[1].error()).to.be.not.equal(null);

            //expect(res.data[2]).to.be.instanceOf(r.Response); //FIXME
            _testTest.expect(multipart[2].error()).to.be.equal(null);
            _testTest.expect(multipart[2].json().baz).to.be.equal('qux');
            _testTest.expect(multipart[2].response().status).to.be.equal(200);
        });

        it('calls the error callback if it fails to parse the parts info block', function () {

            var response = createResponse(207, 'Multi-Status', badMultipartMixedResponse, multipartResponseHeaders);

            _testTest.expect(function () {
                response.multipart();
            }).to['throw'](Error);
        });

        it('calls the error callback if it is unable to parse the JSON data, passing the error object', function () {

            var response = createResponse(200, 'OK', 'THIS IS JUNK', jsonResponseHeaders);

            _testTest.expect(function () {
                response.json();
            }).to['throw'](Error);
        });

        it('uses the error_description property of the JSON data when there is an error but no message property', function () {

            var response = createResponse(404, 'Error', '{"error_description": "ERROR"}', jsonResponseHeaders);

            _testTest.expect(response.error()).to.equal('ERROR');
        });

        it('uses the description property of the JSON data when there is an error but no message or error_description properties', function () {

            var response = createResponse(404, 'Error', '{"description": "ERROR"}', jsonResponseHeaders);

            _testTest.expect(response.error()).to.equal('ERROR');
        });

        it('parses empty response', function () {

            var response = createResponse(204, 'No Content', '', jsonResponseHeaders);

            _testTest.expect(response.error()).to.equal(null);
            _testTest.expect(response.json()).to.equal(null);
        });
    });
});

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _testTest = __webpack_require__(4);

var _SDK = __webpack_require__(9);

var _SDK2 = _interopRequireDefault(_SDK);

describe('RingCentral.http.Client', function () {

    var Client = _SDK2['default'].http.Client;

    function getClient(cb) {

        var client = new Client();

        // hijack into private property to bypass any fetch-related stuff
        client['_loadResponse'] = cb ? cb : function callee$2$0() {
            return regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                    case 0:
                        throw new Error('No resolver provided for _loadResponse');

                    case 1:
                    case 'end':
                        return context$3$0.stop();
                }
            }, null, this);
        };

        return client;
    }

    describe('createRequest', function () {

        it('sets default headers & properties', function () {

            var request = getClient().createRequest({ url: 'http://foo/bar' });

            _testTest.expect(request.headers.get('Content-Type')).to.equal('application/json');
            _testTest.expect(request.headers.get('Accept')).to.equal('application/json');

            _testTest.expect(request.url).to.equal('http://foo/bar');
            _testTest.expect(request.method).to.equal('GET');
        });

        it('validates the method', function () {

            _testTest.expect(function () {
                getClient().createRequest({ url: 'http://foo/bar', method: 'foo' });
            }).to['throw'](Error);
        });
    });
});

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _testTest = __webpack_require__(4);

var _SDK = __webpack_require__(9);

var _SDK2 = _interopRequireDefault(_SDK);

describe('RingCentral.platform.Platform', function () {

    describe('setCredentials', function () {

        it('should have predefined apiKey', function () {

            _testTest.expect(_testTest.getSdk().platform()['_apiKey']()).to.equal('d2hhdGV2ZXI6d2hhdGV2ZXI='); // whatever:whatever
        });
    });

    describe('setServer', function () {

        it('should have predefined server', function () {

            _testTest.expect(_testTest.getSdk().platform()['_server']).to.equal('http://whatever');
        });
    });

    describe('isTokenValid', function () {

        it('is not authenticated when token has expired', function () {

            var sdk = _testTest.getSdk(),
                platform = sdk.platform();

            platform.auth().cancelAccessToken();

            _testTest.expect(platform.auth().accessTokenValid()).to.equal(false);
        });

        it('is not authenticated after logout', _testTest.asyncTest(function callee$2$0(sdk) {
            var platform;
            return regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                    case 0:

                        _testTest.getRegistry().logout();

                        platform = sdk.platform();
                        context$3$0.next = 4;
                        return regeneratorRuntime.awrap(platform.logout());

                    case 4:

                        _testTest.expect(platform.auth().accessTokenValid()).to.equal(false);

                    case 5:
                    case 'end':
                        return context$3$0.stop();
                }
            }, null, this);
        }));

        it('is not authenticated if paused', function () {

            var sdk = _testTest.getSdk(),
                platform = sdk.platform(),
                queue = platform['_queue'];

            queue.pause();
            _testTest.expect(platform.auth().accessTokenValid()).to.equal(false);
            queue.resume();
        });
    });

    describe('authorized', function () {

        it('initiates refresh if not authorized', _testTest.asyncTest(function callee$2$0(sdk) {
            var platform;
            return regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                    case 0:

                        _testTest.getRegistry().tokenRefresh();

                        platform = sdk.platform();

                        _testTest.expect(platform.auth().accessToken()).to.not.equal('ACCESS_TOKEN_FROM_REFRESH');

                        platform.auth().cancelAccessToken();

                        context$3$0.next = 6;
                        return regeneratorRuntime.awrap(platform.loggedIn());

                    case 6:

                        _testTest.expect(platform.auth().accessToken()).to.equal('ACCESS_TOKEN_FROM_REFRESH');

                    case 7:
                    case 'end':
                        return context$3$0.stop();
                }
            }, null, this);
        }));

        it('waits for refresh to resolve from other tab', function () {

            return _testTest.getMock(function (sdk) {

                var queue = sdk.platform()['_queue'],
                    platform = sdk.platform(),
                    token = 'ACCESS_TOKEN_FROM_OTHER_TAB';

                _testTest.expect(platform.auth().accessToken()).to.not.equal(token);

                queue.pause();

                setTimeout(function () {

                    platform.auth().setData({
                        access_token: token,
                        expires_in: 60 * 60 // 1 hour
                    });

                    queue.resume();
                }, 10);

                platform.auth().cancelAccessToken();

                return platform.loggedIn().then(function () {
                    _testTest.expect(platform.auth().accessToken()).to.equal(token);
                });
            });
        });

        it('produces error if refresh did not happen', _testTest.asyncTest(function callee$2$0(sdk) {
            var queue, platform, res;
            return regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                    case 0:
                        queue = sdk.platform()['_queue'], platform = sdk.platform();

                        queue.pause();

                        platform.auth().cancelAccessToken();

                        context$3$0.next = 5;
                        return regeneratorRuntime.awrap(platform.loggedIn());

                    case 5:
                        res = context$3$0.sent;

                        _testTest.expect(res).to.equal(false);

                    case 7:
                    case 'end':
                        return context$3$0.stop();
                }
            }, null, this);
        }));
    });

    describe('sendRequest', function () {

        it('refreshes token when token was expired', function () {

            return _testTest.getMock(function (sdk) {

                var platform = sdk.platform(),
                    path = '/restapi/xxx',
                    refreshSpy = _testTest.spy(function () {});

                _testTest.getRegistry().tokenRefresh().apiCall('GET', path, {});

                _testTest.expect(platform.auth().accessToken()).to.not.equal('ACCESS_TOKEN_FROM_REFRESH');

                platform.auth().cancelAccessToken();

                return platform.on(platform.events.refreshSuccess, refreshSpy).get(path).then(function (ajax) {
                    _testTest.expect(refreshSpy).to.be.calledOnce;
                    _testTest.expect(platform.auth().accessToken()).to.equal('ACCESS_TOKEN_FROM_REFRESH');
                });
            });
        });

        it('tries to refresh the token if Platform returns 401 Unauthorized and re-executes the request', _testTest.asyncTest(function callee$2$0(sdk) {
            var platform, path, refreshSpy, response, res;
            return regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                    case 0:
                        platform = sdk.platform(), path = '/restapi/xxx', refreshSpy = _testTest.spy(function () {}), response = { foo: 'bar' };

                        _testTest.getRegistry().apiCall('GET', path, { message: 'time not in sync' }, 401, 'Time Not In Sync').tokenRefresh().apiCall('GET', path, response, 200);

                        platform.on(platform.events.refreshSuccess, refreshSpy);

                        context$3$0.next = 5;
                        return regeneratorRuntime.awrap(platform.get(path));

                    case 5:
                        res = context$3$0.sent;

                        _testTest.expect(refreshSpy).to.be.calledOnce;
                        _testTest.expect(res.json()).to.deep.equal(response);
                        _testTest.expect(platform.auth().accessToken()).to.equal('ACCESS_TOKEN_FROM_REFRESH');

                    case 9:
                    case 'end':
                        return context$3$0.stop();
                }
            }, null, this);
        }));

        it('fails if ajax has status other than 2xx', function () {

            return _testTest.getMock(function (sdk) {

                var platform = sdk.platform(),
                    path = '/restapi/xxx';

                _testTest.getRegistry().apiCall('GET', path, { description: 'Fail' }, 400, 'Bad Request');

                return platform.get(path).then(function () {
                    throw new Error('This should not be reached');
                })['catch'](function (e) {
                    _testTest.expect(e.message).to.equal('Fail');
                });
            });
        });
    });

    describe('refresh', function () {

        it('handles error in queued AJAX after unsuccessful refresh when token is killed', function () {

            return _testTest.getMock(function (sdk) {

                var platform = sdk.platform(),
                    path = '/restapi/xxx',
                    successSpy = _testTest.spy(function () {}),
                    errorSpy = _testTest.spy(function () {});

                _testTest.getRegistry().tokenRefresh(true).apiCall('GET', path, {});

                platform.auth().cancelAccessToken();

                return platform.on(platform.events.refreshSuccess, successSpy).on(platform.events.refreshError, errorSpy).get(path).then(function () {
                    throw new Error('This should never be called');
                })['catch'](function (e) {
                    _testTest.expect(e.message).to.equal('Wrong token');
                    _testTest.expect(errorSpy).to.be.calledOnce;
                    _testTest.expect(successSpy).not.to.calledOnce;
                });
            });
        });

        it('sits and waits for the queue to be released, no matter how many pending refreshes there are', function () {

            return _testTest.getMock(function (sdk) {

                var queue = sdk.platform()['_queue'],
                    platform = sdk.platform();

                queue.pause();

                setTimeout(function () {
                    queue.resume();
                }, 5);

                return Promise.all([platform.refresh(), platform.refresh(), platform.refresh()]);
            });
        });

        it('handles subsequent refreshes', function () {

            return _testTest.getMock(function (sdk) {

                var platform = sdk.platform();

                _testTest.getRegistry().tokenRefresh().tokenRefresh().tokenRefresh();

                return platform.refresh() // first
                .then(function () {
                    return platform.refresh(); // second
                }).then(function () {
                    return Promise.all([platform.refresh(), // third combined for two
                    platform.refresh()]);
                });
            });
        });

        it('returns error if response is malformed', function () {

            return _testTest.getMock(function (sdk) {

                var platform = sdk.platform();

                _testTest.getRegistry().apiCall('POST', '/restapi/oauth/token', {
                    'message': 'Wrong token',
                    'error_description': 'Wrong token',
                    'description': 'Wrong token'
                }, 240); // This weird status was caught on client's machine

                platform.auth().cancelAccessToken();

                return platform.refresh().then(function () {
                    throw new Error('This should not be reached');
                })['catch'](function (e) {
                    _testTest.expect(e.originalMessage).to.equal('Malformed OAuth response');
                    _testTest.expect(e.message).to.equal('Wrong token');
                });
            });
        });

        it('issues only one refresh request', function () {

            return _testTest.getMock(function (sdk) {

                _testTest.getRegistry().tokenRefresh().apiCall('GET', '/restapi/v1.0/foo', { increment: 1 }).apiCall('GET', '/restapi/v1.0/foo', { increment: 2 }).apiCall('GET', '/restapi/v1.0/foo', { increment: 3 });

                var platform = sdk.platform();

                platform.auth().cancelAccessToken();

                return Promise.all([platform.get('/foo'), platform.get('/foo'), platform.get('/foo')]).then(function (res) {
                    return res.map(function (r) {
                        return r.json();
                    });
                }).then(function (res) {
                    _testTest.expect(platform.auth().accessToken()).to.equal('ACCESS_TOKEN_FROM_REFRESH');
                    _testTest.expect(res[0].increment).to.equal(1);
                    _testTest.expect(res[1].increment).to.equal(2);
                    _testTest.expect(res[2].increment).to.equal(3);
                });
            });
        });

        it('immediately (synchronously) pauses', function () {

            return _testTest.getMock(function (sdk) {

                var queue = sdk.platform()['_queue'],
                    platform = sdk.platform();

                _testTest.getRegistry().tokenRefresh();

                var refresh = platform.refresh();

                _testTest.expect(queue.isPaused()).to.equal(true);

                return refresh;
            });
        });

        it('throws error if queue was unpaused before refresh call', function () {

            return _testTest.getMock(function (sdk) {

                var queue = sdk.platform()['_queue'],
                    platform = sdk.platform();

                _testTest.getRegistry().tokenRefresh();

                var refresh = platform.refresh();

                queue.resume();

                return refresh.then(function () {
                    throw new Error('This should not be reached');
                })['catch'](function (e) {
                    _testTest.expect(e.message).to.equal('Queue was resumed before refresh call');
                });
            });
        });
    });

    describe('refreshPolling', function () {

        it('polls the status of semaphor and resumes operation', function () {

            return _testTest.getMock(function (sdk) {

                var queue = sdk.platform()['_queue'],
                    platform = sdk.platform();

                queue.pause();

                setTimeout(function () {
                    queue.resume();
                }, 10);

                return platform.refresh();
            });
        });

        it('resolves with error if token is not valid after releaseTimeout', function () {

            return _testTest.getMock(function (sdk) {

                var queue = sdk.platform()['_queue'],
                    platform = sdk.platform();

                queue.pause(); // resume() will not be called in this test

                platform.auth().cancelAccessToken();

                return platform.refresh().then(function () {
                    throw new Error('This should not be reached');
                })['catch'](function (e) {
                    _testTest.expect(e.message).to.equal('Automatic authentification timeout');
                });
            });
        });
    });

    describe('get, post, put, delete', function () {

        it('sends request using appropriate method', function () {

            return _testTest.getMock(function (sdk) {

                var platform = sdk.platform();

                function test(method) {

                    var path = '/foo/' + method;

                    _testTest.getRegistry().apiCall(method, path, { foo: 'bar' });

                    return platform[method](path).then(function (res) {
                        _testTest.expect(res.request().method).to.equal(method.toUpperCase());
                        _testTest.expect(res.json().foo).to.equal('bar');
                        return res;
                    });
                }

                return Promise.all([test('get'), test('post'), test('put'), test('delete')]);
            });
        });
    });

    describe('apiUrl', function () {

        it('builds the URL', function () {

            var platform = _testTest.getSdk().platform();

            _testTest.expect(platform.createUrl('/foo')).to.equal('/restapi/v1.0/foo');

            _testTest.expect(platform.createUrl('/foo', { addServer: true })).to.equal('http://whatever/restapi/v1.0/foo');

            _testTest.expect(platform.createUrl('/foo', {
                addServer: true,
                addToken: true
            })).to.equal('http://whatever/restapi/v1.0/foo?access_token=');

            _testTest.expect(platform.createUrl('/foo?bar', {
                addServer: true,
                addToken: true
            })).to.equal('http://whatever/restapi/v1.0/foo?bar&access_token=');

            _testTest.expect(platform.createUrl('/foo?bar', {
                addServer: true,
                addToken: true,
                addMethod: 'POST'
            })).to.equal('http://whatever/restapi/v1.0/foo?bar&_method=POST&access_token=');
        });
    });

    //TODO Add tests for this
    describe.skip('parseAuthRedirectUrl', function () {});
    describe.skip('getAuthURL', function () {});
});
// accessing private member

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _testTest = __webpack_require__(4);

var _SDK = __webpack_require__(9);

var _SDK2 = _interopRequireDefault(_SDK);

describe('RingCentral.subscription.CachedSubscription', function () {

    describe('restore', function () {

        it.skip('sets appropriate event filters if subscription is not alive', function () {});
        it.skip('sets appropriate event filters if subscription is never existed', function () {});
        it.skip('renews subscription if cache data is OK', function () {});
        it.skip('re-subscribes with default event filters when renew fails', function () {});
    });

    describe('renew', function () {});

    describe('resubscribe', function () {});
});

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _testTest = __webpack_require__(4);

var _SDK = __webpack_require__(9);

var _SDK2 = _interopRequireDefault(_SDK);

describe('RingCentral.subscription.Subscription', function () {

    var expiresIn = _SDK2['default'].subscription.Subscription._renewHandicapMs * 2;

    describe('subscribe', function () {

        it('automatically renews subscription', function () {

            return _testTest.getMock(function (sdk) {

                var subscription = sdk.createSubscription();

                _testTest.getRegistry().subscribeGeneric(expiresIn);

                return subscription.setEventFilters(['foo', 'bar']).register().then(function (res) {
                    _testTest.expect(res.json().expiresIn).to.equal(expiresIn);
                });
            });
        });
    });

    describe('notify', function () {

        it('fires a notification event when the notify method is called and passes the message object', function () {

            return _testTest.getMock(function (sdk) {

                return new Promise(function (resolve) {

                    var subscription = sdk.createSubscription();

                    subscription.setSubscription({
                        id: 'foo',
                        expirationTime: new Date(Date.now() + expiresIn).toISOString(),
                        deliveryMode: {
                            subscriberKey: 'foo',
                            address: 'foo'
                        }
                    });

                    subscription.on(subscription.events.notification, function (event) {
                        _testTest.expect(event).to.deep.equal({ foo: 'bar' });
                        resolve();
                    });

                    subscription['_notify']({ foo: 'bar' }); // using private API
                });
            });
        });
    });

    describe('renew', function () {

        it('fails when no subscription', function () {

            return _testTest.getMock(function (sdk) {

                return sdk.createSubscription().renew().then(function () {
                    throw new Error('This should not be reached');
                })['catch'](function (e) {
                    _testTest.expect(e.message).to.equal('Subscription is not alive');
                });
            });
        });

        it('fails when no eventFilters', function () {

            return _testTest.getMock(function (sdk) {

                var subscription = sdk.createSubscription();

                subscription.setSubscription({
                    id: 'foo',
                    expirationTime: new Date(Date.now() + expiresIn).toISOString(),
                    deliveryMode: {
                        subscriberKey: 'foo',
                        address: 'foo'
                    }
                });

                return subscription.renew().then(function () {
                    throw new Error('This should not be reached');
                })['catch'](function (e) {
                    _testTest.expect(e.message).to.equal('Events are undefined');
                });
            });
        });

        it.skip('automatically renews when subscription is going to expire');
    });

    describe('subscribe', function () {

        it('fails when no eventFilters', function () {

            return _testTest.getMock(function (sdk) {

                return sdk.createSubscription().subscribe().then(function () {
                    throw new Error('This should not be reached');
                })['catch'](function (e) {
                    _testTest.expect(e.message).to.equal('Events are undefined');
                });
            });
        });

        it('calls the success callback and passes the subscription provided from the platform', function () {

            return _testTest.getMock(function (sdk) {

                var event = 'foo',
                    subscription = sdk.createSubscription();

                _testTest.getRegistry().subscribeGeneric();

                return subscription.setEventFilters([event]).subscribe().then(function () {
                    _testTest.expect(subscription.subscription().eventFilters.length).to.equal(1);
                });
            });
        });

        it('calls the error callback and passes the error provided from the platform', function () {

            return _testTest.getMock(function (sdk) {

                var subscription = sdk.createSubscription();

                _testTest.getRegistry().apiCall('POST', '/restapi/v1.0/subscription', { 'message': 'Subscription failed' }, 400, 'Bad Request');

                return subscription.setEventFilters(['foo']).subscribe().then(function () {
                    throw new Error('This should never be reached');
                })['catch'](function (e) {

                    _testTest.expect(e.message).to.equal('Subscription failed');
                    _testTest.expect(e).to.be.an.instanceOf(Error);
                });
            });
        });
    });

    describe('decrypt', function () {

        it('decrypts AES-encrypted messages when the subscription has an encryption key', function () {

            var subscription = _testTest.getSdk().createSubscription().setSubscription({
                id: 'foo',
                expirationTime: new Date(Date.now() + expiresIn).toISOString(),
                deliveryMode: {
                    encryptionKey: 'e0bMTqmumPfFUbwzppkSbA==',
                    subscriberKey: 'foo',
                    address: 'foo'
                }
            }),
                aesMessage = 'gkw8EU4G1SDVa2/hrlv6+0ViIxB7N1i1z5MU/Hu2xkIKzH6yQzhr3vIc27IAN558kTOkacqE5DkLpRdnN1orwtI' + 'BsUHmPMkMWTOLDzVr6eRk+2Gcj2Wft7ZKrCD+FCXlKYIoa98tUD2xvoYnRwxiE2QaNywl8UtjaqpTk1+WDImBrt' + '6uabB1WICY/qE0It3DqQ6vdUWISoTfjb+vT5h9kfZxWYUP4ykN2UtUW1biqCjj1Rb6GWGnTx6jPqF77ud0XgV1r' + 'k/Q6heSFZWV/GP23/iytDPK1HGJoJqXPx7ErQU=';

            _testTest.expect(subscription['_decrypt'](aesMessage)).to.deep.equal({
                "timestamp": "2014-03-12T20:47:54.712+0000",
                "body": {
                    "extensionId": 402853446008,
                    "telephonyStatus": "OnHold"
                },
                "event": "/restapi/v1.0/account/~/extension/402853446008/presence",
                "uuid": "db01e7de-5f3c-4ee5-ab72-f8bd3b77e308"
            });
        });
    });

    describe('restoreFromCache', function () {

        it.skip('sets appropriate event filters if subscription is not alive', function () {});
        it.skip('sets appropriate event filters if subscription is never existed', function () {});
        it.skip('renews subscription if cache data is OK', function () {});
        it.skip('re-subscribes with default event filters when renew fails', function () {});
    });
});

/***/ }
/******/ ])
});
;
//# sourceMappingURL=ringcentral-tests.js.map